# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [ (modulesPath + "/profiles/qemu-guest.nix") ];

  boot = {
    initrd.availableKernelModules = [
      "uhci_hcd"
      "ehci_pci"
      "ahci"
      "virtio_pci"
      "virtio_scsi"
      "sd_mod"
      "sr_mod"
    ];
    initrd.kernelModules = [ ];
    kernelModules = [ "kvm-amd" ];
    extraModulePackages = [ ];
    zfs = {
      extraPools = [ "storage" ];
      passwordTimeout = 30; # don't wait (and hang) forever
      requestEncryptionCredentials = false; # needs to be true if root is on ZFS, but causes hangs otherwise
      forceImportRoot = false; # recommended to set false by docs (true for historical reasons)
      forceImportAll = false;
    };
  };

  # root file systems managed by disko

  # zfs file systems managed by zfs (zpool/root -o mountpoint=/mnt/storage)
  # fileSystems."/mnt/storage" = {
  #   device = "zpool/root";
  #   fsType = "zfs";
  # };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  # networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s18.useDHCP = lib.mkDefault true;

  # configured by cloud-init
  systemd.network.networks."10-lan" = {
    matchConfig.Name = "enp6s18";
    networkConfig = {
      Address = "192.168.1.10/24";
      Gateway = "192.168.1.1";
      DNS = "1.1.1.1";

      # accept Router Advertisements for Stateless IPv6 Autoconfiguraton (SLAAC)
      IPv6AcceptRA = true;
    };
    domains = [ "josephstahl.com" ]; # look up ie nixos.josephstahl.com on the local DNS server
    # make routing on this interface a dependency for network-online.target
    linkConfig.RequiredForOnline = "routable";
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
